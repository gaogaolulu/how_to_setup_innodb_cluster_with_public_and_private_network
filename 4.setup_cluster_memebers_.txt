
#### node1/2/3:

#### at secondary node :  node 2 / 3 
 
#### STOP GROUP_REPLICATION;

####select * from performance_schema.replication_group_members;

before start : check gtid_executed
####use  mysql ; 
####truncate table  gtid_executed ;
 
 
#### node 1 : user mysql 
 
 
 
 
/****  how to destroy just in case

dba.dropMetadataSchema()

cluster.removeInstance('root@xxxx.51:3306');

cluster.dissolve();

****/


[mysql@dbnode01]# mysqlsh

shell.connect('root@xxxx:3306');

dba.configureLocalInstance();

// inputs:
1
192.168.0.%
y



/**** 
Configuring local MySQL instance listening at port 3306 for use in an InnoDB cluster...

This instance reports its own address as 192.168.0.2:3306

ERROR: User 'root' can only connect from 'localhost'. New account(s) with proper source address specification to allow remote connection from all instances must be created to manage the cluster.

1) Create remotely usable account for 'root' with same grants and password
2) Create a new admin account for InnoDB cluster with minimal required grants
3) Ignore and continue
4) Cancel

Please select an option [1]: 1
Please provide a source address filter for the account (e.g: 192.168.% or % etc) or leave empty and press Enter to cancel.
Account Host: 192.168.0.%

The instance '192.168.0.2:3306' is valid to be used in an InnoDB cluster.

The MySQL instance at 'localhost:3306' currently has the super_read_only system
variable set to protect it from inadvertent updates from applications.
You must first unset it to be able to perform any changes to this instance.
For more information see:
https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_super_read_only.

NOTE: There are open sessions to 'localhost:3306'.
You may want to kill these sessions to prevent them from performing unexpected updates:

1 open session(s) of 'root@localhost'.

Do you want to disable super_read_only and continue? [y/N]: y
Disabled super_read_only on the instance '192.168.0.2:3306'
Cluster admin user 'root'@'192.168.0.%' created.
Enabling super_read_only on the instance '192.168.0.2:3306'
The instance '192.168.0.2:3306' is already ready to be used in an InnoDB cluster.

****/

var cluster = dba.createCluster('myCluster');

/****
A new InnoDB cluster will be created on instance 'localhost:3306'.

Disabling super_read_only mode on instance '192.168.0.2:3306'.
Validating instance configuration at localhost:3306...

This instance reports its own address as 192.168.0.2:3306

Instance configuration is suitable.
NOTE: Group Replication will communicate with other members using '192.168.0.2:33061'. Use the localAddress option to override.

Creating InnoDB cluster 'myCluster' on '192.168.0.2:3306'...

Adding Seed Instance...
Cluster successfully created. Use Cluster.addInstance() to add MySQL instances.
At least 3 instances are needed for the cluster to be able to withstand up to
one server failure.


 
****/

 


cluster.status();


/**** 




 MySQL  localhost:3306 ssl  JS > cluster.status();
{
    "clusterName": "myCluster",
    "defaultReplicaSet": {
        "name": "default",
        "primary": "192.168.0.2:3306",
        "ssl": "REQUIRED",
        "status": "OK_NO_TOLERANCE",
        "statusText": "Cluster is NOT tolerant to any failures.",
        "topology": {
            "192.168.0.2:3306": {
                "address": "192.168.0.2:3306",
                "mode": "R/W",
                "readReplicas": {},
                "replicationLag": null,
                "role": "HA",
                "status": "ONLINE",
                "version": "8.0.19"
            }
        },
        "topologyMode": "Single-Primary"
    },
    "groupInformationSourceMember": "192.168.0.2:3306"
}



****/




node 2: 

[mysql@dbnode02]# mysqlsh

shell.connect('root@xxxx.52:3306');

/****


 MySQL  JS > shell.connect('root@localhost:3306');
Creating a session to 'root@localhost:3306'
Please provide the password for 'root@localhost:3306': **********
Save password for 'root@localhost:3306'? [Y]es/[N]o/Ne[v]er (default No): Y
Fetching schema names for autocompletion... Press ^C to stop.
Your MySQL connection id is 1283
Server version: 8.0.19-commercial MySQL Enterprise Server - Commercial
No default schema selected; type \use <schema> to set one.
<ClassicSession:root@localhost:3306>
 MySQL  localhost:3306 ssl  JS >



****/



dba.configureLocalInstance();
 
1
192.168.0.%
y

/****

Configuring local MySQL instance listening at port 3306 for use in an InnoDB cluster...

This instance reports its own address as 192.168.0.3:3306

ERROR: User 'root' can only connect from 'localhost'. New account(s) with proper source address specification to allow remote connection from all instances must be created to manage the cluster.

1) Create remotely usable account for 'root' with same grants and password
2) Create a new admin account for InnoDB cluster with minimal required grants
3) Ignore and continue
4) Cancel

Please select an option [1]: 1
Please provide a source address filter for the account (e.g: 192.168.% or % etc) or leave empty and press Enter to cancel.
Account Host: 192.168.0.%

The instance '192.168.0.3:3306' is valid to be used in an InnoDB cluster.

The MySQL instance at 'localhost:3306' currently has the super_read_only system
variable set to protect it from inadvertent updates from applications.
You must first unset it to be able to perform any changes to this instance.
For more information see:
https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_super_read_only.

NOTE: There are open sessions to 'localhost:3306'.
You may want to kill these sessions to prevent them from performing unexpected updates:

1 open session(s) of 'root@localhost'.

Do you want to disable super_read_only and continue? [y/N]: y
Disabled super_read_only on the instance '192.168.0.3:3306'
Cluster admin user 'root'@'192.168.0.%' created.
Enabling super_read_only on the instance '192.168.0.3:3306'
The instance '192.168.0.3:3306' is already ready to be used in an InnoDB cluster.



****/


 

 

node 1 : current mysqlsh windows 

cluster.addInstance('root@10.220.19.52:3306');

Y
(or C)

cluster.status();

  

/****

 MySQL  localhost:3306 ssl  JS > cluster.addInstance('root@192.168.0.3:3306');
Please provide the password for 'root@192.168.0.3:3306': **********
Save password for 'root@192.168.0.3:3306'? [Y]es/[N]o/Ne[v]er (default No): Y
The safest and most convenient way to provision a new instance is through automatic clone provisioning, which will completely overwrite the state of '192.168.0.3:3306' with a physical snapshot from an existing cluster member. To use this method by default, set the 'recoveryMethod' option to 'clone'.

The incremental state recovery may be safely used if you are sure all updates ever executed in the cluster were done with GTIDs enabled, there are no purged transactions and the new instance contains the same GTID set as the cluster or a subset of it. To use this method by default, set the 'recoveryMethod' option to 'incremental'.

Incremental state recovery was selected because it seems to be safely usable.

NOTE: Group Replication will communicate with other members using '192.168.0.3:33061'. Use the localAddress option to override.

Validating instance configuration at 192.168.0.3:3306...

This instance reports its own address as 192.168.0.3:3306

Instance configuration is suitable.
A new instance will be added to the InnoDB cluster. Depending on the amount of
data on the cluster this might take from a few seconds to several hours.

Adding instance to the cluster...

Monitoring recovery process of the new cluster member. Press ^C to stop monitoring and let it continue in background.
Incremental state recovery is now in progress.

* Waiting for distributed recovery to finish...
NOTE: '192.168.0.3:3306' is being recovered from '192.168.0.2:3306'
* Distributed recovery has finished

The instance '192.168.0.3:3306' was successfully added to the cluster.

 MySQL  localhost:3306 ssl  JS > cluster.status();
{
    "clusterName": "myCluster",
    "defaultReplicaSet": {
        "name": "default",
        "primary": "192.168.0.2:3306",
        "ssl": "REQUIRED",
        "status": "OK_NO_TOLERANCE",
        "statusText": "Cluster is NOT tolerant to any failures.",
        "topology": {
            "192.168.0.2:3306": {
                "address": "192.168.0.2:3306",
                "mode": "R/W",
                "readReplicas": {},
                "replicationLag": null,
                "role": "HA",
                "status": "ONLINE",
                "version": "8.0.19"
            },
            "192.168.0.3:3306": {
                "address": "192.168.0.3:3306",
                "mode": "R/O",
                "readReplicas": {},
                "replicationLag": null,
                "role": "HA",
                "status": "ONLINE",
                "version": "8.0.19"
            }
        },
        "topologyMode": "Single-Primary"
    },
    "groupInformationSourceMember": "192.168.0.2:3306"
}
 MySQL  localhost:3306 ssl  JS >





****/
  




node 3: 

[root@dbnode02]# mysqlsh

shell.connect('root@xxxx.53:3306');

dba.configureLocalInstance();
 
1
192.168.0.%
y

/****


Configuring local MySQL instance listening at port 3306 for use in an InnoDB cluster...

This instance reports its own address as 192.168.0.4:3306

ERROR: User 'root' can only connect from 'localhost'. New account(s) with proper source address specification to allow remote connection from all instances must be created to manage the cluster.

1) Create remotely usable account for 'root' with same grants and password
2) Create a new admin account for InnoDB cluster with minimal required grants
3) Ignore and continue
4) Cancel

Please select an option [1]: 1
Please provide a source address filter for the account (e.g: 192.168.% or % etc) or leave empty and press Enter to cancel.
Account Host: 192.168.0.%

The instance '192.168.0.4:3306' is valid to be used in an InnoDB cluster.

The MySQL instance at 'localhost:3306' currently has the super_read_only system
variable set to protect it from inadvertent updates from applications.
You must first unset it to be able to perform any changes to this instance.
For more information see:
https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_super_read_only.

NOTE: There are open sessions to 'localhost:3306'.
You may want to kill these sessions to prevent them from performing unexpected updates:

1 open session(s) of 'root@localhost'.

Do you want to disable super_read_only and continue? [y/N]: y
Disabled super_read_only on the instance '192.168.0.4:3306'
Cluster admin user 'root'@'192.168.0.%' created.
Enabling super_read_only on the instance '192.168.0.4:3306'
The instance '192.168.0.4:3306' is already ready to be used in an InnoDB cluster.
 MySQL  localhost:3306 ssl  JS >

 
 
 ****/
 
 

 
node 1 : current mysqlsh windows 

cluster.addInstance('root@xxxx.53:3306');

Y
(or C)

 cluster.status();


 
 
 /*****
 
 
 MySQL  localhost:3306 ssl  JS >  cluster.status();
{
    "clusterName": "myCluster",
    "defaultReplicaSet": {
        "name": "default",
        "primary": "192.168.0.2:3306",
        "ssl": "REQUIRED",
        "status": "OK",
        "statusText": "Cluster is ONLINE and can tolerate up to ONE failure.",
        "topology": {
            "192.168.0.2:3306": {
                "address": "192.168.0.2:3306",
                "mode": "R/W",
                "readReplicas": {},
                "replicationLag": null,
                "role": "HA",
                "status": "ONLINE",
                "version": "8.0.19"
            },
            "192.168.0.3:3306": {
                "address": "192.168.0.3:3306",
                "mode": "R/O",
                "readReplicas": {},
                "replicationLag": null,
                "role": "HA",
                "status": "ONLINE",
                "version": "8.0.19"
            },
            "192.168.0.4:3306": {
                "address": "192.168.0.4:3306",
                "mode": "R/O",
                "readReplicas": {},
                "replicationLag": null,
                "role": "HA",
                "status": "ONLINE",
                "version": "8.0.19"
            }
        },
        "topologyMode": "Single-Primary"
    },
    "groupInformationSourceMember": "192.168.0.2:3306"
}
 MySQL  localhost:3306 ssl  JS >

 
 ****/
 
 

 
 mysql -uroot -hlocalhost --socket=/d0100/MYSQL/socket/mysql.sock  -p'Minacs@123'
 
 select * from performance_schema.replication_group_members;
 
  
